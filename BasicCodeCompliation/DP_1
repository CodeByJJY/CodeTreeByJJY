# 1. 동적 프로그래밍
# - 동적계획법은 점화식을 기반으로 하는 방법
# - 동적계획법이란 큰 문제에 대한 답을 얻기 위해 동일한 문제이지만 크기가 더 작은 문제들을 먼저 해결한 뒤, 그 결과들을 이용해 큰 문제를 비교적 간단하게 해결하는 기법





# 2. Memoization : Top-Down Approach(높은 수에서 낮은 수로 내려가면서 구함.)
# - 중복 연산 방지.
# - 이를 가능하게 하기 위해 memo라는 배열을 이용해 볼 수 있습니다.
# - 처음에는 전부 -1로 초기화를 해놓습니다.
# - memo에 해당하는 값이 -1이라면, 그 값을 실제로 계산한 뒤 memo에 저장해둡니다.
# - 이후 memo에 해당 값이 -1이 아니라면, 이미 계산한 적이 있었다는 뜻이므로 memo에 적혀있는 값을 그대로 반환합니다.
# - 이렇게 진행을 하게 되면, 각 n에 해당하는 값을 정확히 한 번씩만 계산해주게 됩니다.
# - 시간 복잡도 : 2^n -> n
#################### 예시 ####################
def fibbo(n):
    # 이미 n번째 값을 구한 적이 있다면, memo에 적힌 값 반환
    if memo[n] != -1:
        return memo[n]
    
    # n <= 2 : 종료 조건
    if n <= 2:
        memo[n]
    # 종료조건 아닌 경우 : 점화식을 이용하여 답을 구한 뒤, memo에 저장.
    else:
        memo[n] = fibbo(n - 1) + fibbo(n - 2)
    
    # memo 값을 반환.
    return memo[n]
##############################################



# 3. Tabulation : Bottom-Up(아래에서 값을 채워나감.)
# - for문 사용 : 순서대로 배열에 값을 채워나가는 방식.
#################### 예시 ####################
dp = [0] * MAX_N
dp[1], dp[2] = 1, 1

for i in range(3, n + 1):
    dp[i] = dp[i - 1] + dp[i - 2]

print(dp[n])
##############################################


#################### 예시 ####################
import sys

INT_MIN = -sys.maxsize

n = 5
dp = [0] * n            # 점프 횟수 기록
a = [2, 3, 0, 1, 4]     # 판

def initialize():
    for i in range(n):
        dp[i] = INT_MIN
    
    dp[0] = 0

initialize()

for i in range(1, n):
    for j in range(0, i):
        if dp[j] == INT_MIN:
            continue

        if j + a[j] >= i:
            dp[i] = max(dp[i], dp[j] + 1)

ans = 0
for i in range(n):
    ans = max(ans, dp[i])

print(ans)
##############################################





# dp[i]에 대한 정의를 ‘지금까지 선택한 동전의 합이 i라 했을 때, 
# 가능한 최대 동전의 개수’라고 해봅시다.

import sys

INT_MIN = -sys.maxsize

n, m = 3, 8
dp = [0] * (n + 1)
coin = [0, 2, 3, 5]

def initialize():
    for i in range(m + 1):
        dp[i] = INT_MIN
    dp[0] = 0

initialize()

for i in range(1, m + 1):
    for j in range(1, n + 1):
        if i >= coin[j]:
            if dp[i - coin[j]] == INT_MIN:
                continue
            
            dp[i] = max(dp[i], dp[i - coin[j]] + 1)

ans = dp[m]

if ans == INT_MIN:
    ans = -1

print(ans)
